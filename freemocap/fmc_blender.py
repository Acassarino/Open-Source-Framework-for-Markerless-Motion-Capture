import numpy as np
import bpy
from mathutils import Vector
import math
import sys
from pathlib import Path

# get arguments
argv = sys.argv
argv = argv[argv.index("--") + 1:] 
 
# get npy session data
input_npy = argv[0]

# get session path
sesh_path = argv[1]

#lol
build_data  = np.array([[ 3.73580574e+01, -3.61045174e+02,  1.24704183e+03],
       [ 5.28761546e+01, -3.84715948e+02,  1.25195537e+03],
       [ 6.27697808e+01, -3.85856201e+02,  1.25022915e+03],
       [ 7.19403839e+01, -3.87199842e+02,  1.24894742e+03],
       [ 3.39031345e+01, -3.84359346e+02,  1.26525647e+03],
       [ 2.85756897e+01, -3.84625458e+02,  1.27232875e+03],
       [ 2.33983564e+01, -3.85082382e+02,  1.27961419e+03],
       [ 9.30891636e+01, -3.83473071e+02,  1.26517961e+03],
       [ 2.56638906e+01, -3.78759340e+02,  1.30595212e+03],
       [ 5.69374627e+01, -3.40843380e+02,  1.24841841e+03],
       [ 3.24982212e+01, -3.39247028e+02,  1.26135621e+03],
       [ 1.84486202e+02, -2.34149700e+02,  1.24448508e+03],
       [-2.60801635e+01, -2.22642540e+02,  1.36477257e+03],
       [ 1.99972856e+02, -4.54009412e+01,  1.20175248e+03],
       [-4.53345614e+01, -3.55126367e+01,  1.37256483e+03],
       [ 1.56000350e+02, -1.02720701e+02,  1.06184626e+03],
       [-1.02568809e+02,  4.24247909e+01,  1.23042231e+03],
       [ 1.33922230e+02, -1.18884904e+02,  1.01768505e+03],
       [-1.27758069e+02,  7.57381197e+01,  1.20359673e+03],
       [ 1.60684787e+02, -1.44726550e+02,  1.03451020e+03],
       [-1.33648358e+02,  6.37327119e+01,  1.18138997e+03],
       [ 1.62492877e+02, -1.39684330e+02,  1.05173410e+03],
       [-1.21724999e+02,  5.17640666e+01,  1.18755043e+03],
       [ 1.27378558e+02,  1.21354707e+02,  1.25195335e+03],
       [ 3.35014909e-01,  1.22960715e+02,  1.31394815e+03],
       [ 1.90072697e+02,  3.88188514e+02,  1.24180256e+03],
       [-4.20769367e+01,  3.68136657e+02,  1.29739306e+03],
       [ 2.66366127e+02,  6.68651328e+02,  1.26774011e+03],
       [ 1.92705615e+00,  6.30172374e+02,  1.38275776e+03],
       [ 2.75256454e+02,  7.17519057e+02,  1.26631312e+03],
       [ 2.33533020e+01,  6.58069507e+02,  1.35468804e+03],
       [ 2.46972319e+02,  7.15271587e+02,  1.18000396e+03],
       [-6.27910727e+01,  6.73814529e+02,  1.32037737e+03],
       [            np.nan,             np.nan,            np.nan],
       [-1.59239030e+02,  2.47675459e+01,  1.20646348e+03],
       [-1.76224117e+02,  3.72347741e+01,  1.19425307e+03],
       [-1.84429201e+02,  4.88017878e+01,  1.18109191e+03],
       [-1.91536801e+02,  5.70791864e+01,  1.16999331e+03],
       [-1.61819985e+02,  6.36180616e+01,  1.19999037e+03],
       [-1.62365932e+02,  8.46109819e+01,  1.20573260e+03],
       [-1.69281919e+02,  8.71933029e+01,  1.20229436e+03],
       [-1.75382338e+02,  8.32807422e+01,  1.19519489e+03],
       [-1.49355748e+02,  6.57648281e+01,  1.19775376e+03],
       [-1.49897894e+02,  8.67833162e+01,  1.20349856e+03],
       [-1.56961917e+02,  8.67194669e+01,  1.20073129e+03],
       [-1.62256524e+02,  7.98149765e+01,  1.19374198e+03],
       [-1.37727580e+02,  6.35099116e+01,  1.19398931e+03],
       [-1.39924894e+02,  8.10488056e+01,  1.19304293e+03],
       [-1.49048182e+02,  7.80780280e+01,  1.18290661e+03],
       [-1.55887763e+02,  7.04600944e+01,  1.17338702e+03],
       [-1.26999314e+02,  5.80230499e+01,  1.18949828e+03],
       [-1.31578331e+02,  6.84372401e+01,  1.17519045e+03],
       [-1.40573308e+02,  6.70927473e+01,  1.16176223e+03],
       [-1.47967694e+02,  6.28699717e+01,  1.15215212e+03],
       [ 1.84338314e+02, -1.13177970e+02,  1.10353593e+03],
       [ 1.94785669e+02, -1.39036671e+02,  1.09953940e+03],
       [ 2.00012222e+02, -1.61202470e+02,  1.09531679e+03],
       [ 2.04505167e+02, -1.79825518e+02,  1.09571001e+03],
       [ 2.11285927e+02, -1.96780077e+02,  1.10220888e+03],
       [ 1.91480038e+02, -1.45105511e+02,  1.07673866e+03],
       [ 1.84562350e+02, -1.55845742e+02,  1.06029790e+03],
       [ 1.76948676e+02, -1.63995339e+02,  1.05637049e+03],
       [ 1.68995002e+02, -1.71558368e+02,  1.05273382e+03],
       [ 1.78403971e+02, -1.32703215e+02,  1.07133477e+03],
       [ 1.63769734e+02, -1.39570152e+02,  1.05481289e+03],
       [ 1.51884434e+02, -1.47526073e+02,  1.05000287e+03],
       [ 1.41791483e+02, -1.54589916e+02,  1.04581953e+03],
       [ 1.65589833e+02, -1.22156936e+02,  1.06979096e+03],
       [ 1.48526353e+02, -1.28181303e+02,  1.05878707e+03],
       [ 1.37204196e+02, -1.36567299e+02,  1.05613915e+03],
       [ 1.27962080e+02, -1.43600883e+02,  1.05299259e+03],
       [ 1.54300971e+02, -1.13472460e+02,  1.07052017e+03],
       [ 1.38594927e+02, -1.18054664e+02,  1.06475044e+03],
       [ 1.29648884e+02, -1.24571952e+02,  1.06485451e+03],
       [ 1.21997220e+02, -1.30567445e+02,  1.06416809e+03],
       [ 3.68272591e+01, -3.43198420e+02,  1.24254710e+03],
       [ 3.38301757e+01, -3.58231772e+02,  1.23909636e+03],
       [ 3.72469181e+01, -3.54257609e+02,  1.24419045e+03],
       [ 3.37169334e+01, -3.73537813e+02,  1.24695123e+03],
       [ 3.36583598e+01, -3.62887479e+02,  1.23934616e+03],
       [ 3.48555522e+01, -3.69201568e+02,  1.24198450e+03],
       [ 3.89214824e+01, -3.84962851e+02,  1.25031800e+03],
       [ 2.14770903e+01, -3.84566540e+02,  1.27511347e+03],
       [ 3.97384335e+01, -3.94610856e+02,  1.25260495e+03],
       [ 3.94568131e+01, -4.00497235e+02,  1.25279325e+03],
       [ 4.16810706e+01, -4.26343302e+02,  1.25986507e+03],
       [ 3.69582860e+01, -3.40944848e+02,  1.24248161e+03],
       [ 3.74673710e+01, -3.39320339e+02,  1.24310766e+03],
       [ 3.81371503e+01, -3.38758473e+02,  1.24409439e+03],
       [ 3.95884350e+01, -3.36735190e+02,  1.24664536e+03],
       [ 3.92555133e+01, -3.34831636e+02,  1.24591100e+03],
       [ 3.90893211e+01, -3.32442470e+02,  1.24536787e+03],
       [ 3.93604527e+01, -3.29901982e+02,  1.24544240e+03],
       [ 4.05445467e+01, -3.25611730e+02,  1.24671388e+03],
       [ 3.48602196e+01, -3.56036109e+02,  1.24048200e+03],
       [ 3.32520404e+01, -3.56236054e+02,  1.24509365e+03],
       [ 1.39669528e+01, -4.03509446e+02,  1.29832134e+03],
       [ 2.99090087e+01, -3.81875054e+02,  1.26705084e+03],
       [ 2.67814090e+01, -3.81097690e+02,  1.26934042e+03],
       [ 2.38159134e+01, -3.80945839e+02,  1.27187501e+03],
       [ 2.06551672e+01, -3.82953577e+02,  1.27699301e+03],
       [ 3.23492111e+01, -3.83363387e+02,  1.26512245e+03],
       [ 2.44569485e+01, -3.91270770e+02,  1.26924411e+03],
       [ 2.77949826e+01, -3.91646934e+02,  1.26691740e+03],
       [ 2.17137665e+01, -3.90386031e+02,  1.27203035e+03],
       [ 2.01884118e+01, -3.89013093e+02,  1.27449050e+03],
       [ 1.82230738e+01, -3.79888442e+02,  1.27944632e+03],
       [ 2.98344057e+01, -3.17119712e+02,  1.25591056e+03],
       [ 2.06755944e+01, -3.85366564e+02,  1.27671014e+03],
       [ 1.35105955e+01, -3.83020639e+02,  1.29752509e+03],
       [ 1.56351791e+01, -3.82808561e+02,  1.28482796e+03],
       [ 2.46121610e+01, -3.61749943e+02,  1.26227729e+03],
       [ 3.29208747e+01, -3.43414130e+02,  1.24561100e+03],
       [ 3.43554330e+01, -3.38992328e+02,  1.24590614e+03],
       [ 2.96826555e+01, -3.41555326e+02,  1.24989335e+03],
       [ 2.82505296e+01, -3.39397193e+02,  1.25330248e+03],
       [ 3.21205996e+01, -3.38465927e+02,  1.24929043e+03],
       [ 3.07280719e+01, -3.37751761e+02,  1.25233742e+03],
       [ 2.69018927e+01, -3.32074199e+02,  1.25933874e+03],
       [ 3.12947048e+01, -3.58039767e+02,  1.24119739e+03],
       [ 3.07852614e+01, -3.62423504e+02,  1.24180433e+03],
       [ 1.54007495e+01, -3.92376213e+02,  1.27953215e+03],
       [ 3.13068072e+01, -3.74235991e+02,  1.25967138e+03],
       [ 2.70335157e+01, -3.59299476e+02,  1.25277064e+03],
       [ 2.75105740e+01, -3.61911713e+02,  1.25429975e+03],
       [ 1.70282819e+01, -3.61637686e+02,  1.27271921e+03],
       [ 3.21178114e+01, -3.68392542e+02,  1.24425228e+03],
       [ 2.08259173e+01, -3.96678426e+02,  1.26940828e+03],
       [ 1.72527677e+01, -3.95090065e+02,  1.27465721e+03],
       [ 1.49052216e+01, -4.11288019e+02,  1.29190087e+03],
       [ 3.36473884e+01, -3.94668678e+02,  1.25732539e+03],
       [ 3.10013010e+01, -3.91096567e+02,  1.26518152e+03],
       [ 2.44370062e+01, -3.36037445e+02,  1.26149079e+03],
       [ 2.05894343e+01, -3.39170528e+02,  1.29689239e+03],
       [ 2.96287353e+01, -3.57037317e+02,  1.25107133e+03],
       [ 3.23071558e+01, -3.55774994e+02,  1.24879896e+03],
       [ 2.76992553e+01, -3.36166108e+02,  1.25854042e+03],
       [ 2.94267254e+01, -3.36787555e+02,  1.25792896e+03],
       [ 1.59065921e+01, -3.98214037e+02,  1.27756263e+03],
       [ 2.77892459e+01, -3.57489121e+02,  1.25408717e+03],
       [ 2.61791405e+01, -3.96791189e+02,  1.26349677e+03],
       [ 2.52996015e+01, -4.00585231e+02,  1.26417177e+03],
       [ 2.40384244e+01, -4.22185245e+02,  1.27497622e+03],
       [ 1.53437573e+01, -4.05034426e+02,  1.28433254e+03],
       [ 2.47502405e+01, -4.11995862e+02,  1.26898519e+03],
       [ 1.42061668e+01, -3.94672513e+02,  1.28324162e+03],
       [ 1.38764904e+01, -3.98868315e+02,  1.29037833e+03],
       [ 3.33918297e+01, -3.40726070e+02,  1.24547583e+03],
       [ 3.08242717e+01, -3.39547823e+02,  1.24914190e+03],
       [ 2.93489651e+01, -3.38429045e+02,  1.25251464e+03],
       [ 3.06953465e+01, -3.56317967e+02,  1.25077385e+03],
       [ 2.85374922e+01, -3.36375473e+02,  1.25810437e+03],
       [ 2.95610244e+01, -3.35663118e+02,  1.25667043e+03],
       [ 3.00056165e+01, -3.37180243e+02,  1.25812783e+03],
       [ 2.97303398e+01, -3.58268269e+02,  1.24714273e+03],
       [ 3.18795158e+01, -3.38290896e+02,  1.25286399e+03],
       [ 3.33522160e+01, -3.38538211e+02,  1.24979504e+03],
       [ 3.54358987e+01, -3.38631320e+02,  1.24672193e+03],
       [ 3.63550363e+01, -3.25370401e+02,  1.24969045e+03],
       [ 3.54024094e+01, -3.29860209e+02,  1.24822519e+03],
       [ 3.54630404e+01, -3.32525252e+02,  1.24814418e+03],
       [ 3.58872470e+01, -3.34939987e+02,  1.24849414e+03],
       [ 3.64971110e+01, -3.36574748e+02,  1.24902493e+03],
       [ 3.24149659e+01, -3.36698855e+02,  1.25448930e+03],
       [ 3.17095024e+01, -3.36035244e+02,  1.25439842e+03],
       [ 3.07455297e+01, -3.34697963e+02,  1.25447872e+03],
       [ 3.00367317e+01, -3.33076153e+02,  1.25474965e+03],
       [ 2.59787911e+01, -3.44528779e+02,  1.25666824e+03],
       [ 1.81422710e+01, -3.63139059e+02,  1.30439567e+03],
       [ 3.60886536e+01, -3.55390340e+02,  1.24241217e+03],
       [ 3.14491894e+01, -3.36800798e+02,  1.25643144e+03],
       [ 3.04851591e+01, -3.36400954e+02,  1.25636885e+03],
       [ 3.33158539e+01, -3.53789666e+02,  1.24763903e+03],
       [ 2.94974202e+01, -3.54888162e+02,  1.25389172e+03],
       [ 3.28111372e+01, -3.54716369e+02,  1.24816079e+03],
       [ 2.84029737e+01, -3.71283909e+02,  1.26243785e+03],
       [ 2.34277743e+01, -3.67608918e+02,  1.26592938e+03],
       [ 2.76704216e+01, -3.59972757e+02,  1.25559499e+03],
       [ 1.80577583e+01, -4.17657700e+02,  1.28423562e+03],
       [ 1.88888517e+01, -4.09571558e+02,  1.27742917e+03],
       [ 1.97375752e+01, -4.00498164e+02,  1.27110708e+03],
       [ 2.92453739e+01, -3.29423426e+02,  1.25647608e+03],
       [ 3.21095935e+01, -4.00446331e+02,  1.25800239e+03],
       [ 3.16813601e+01, -4.13185290e+02,  1.26234114e+03],
       [ 3.15729949e+01, -4.24814818e+02,  1.26717633e+03],
       [ 2.16747666e+01, -3.81499537e+02,  1.27480893e+03],
       [ 1.52763062e+01, -3.76554482e+02,  1.28289581e+03],
       [ 3.37925258e+01, -3.84750841e+02,  1.26377394e+03],
       [ 1.76099296e+01, -3.87675459e+02,  1.27936411e+03],
       [ 3.31456771e+01, -3.77371560e+02,  1.25757087e+03],
       [ 2.78192974e+01, -3.60865245e+02,  1.24922960e+03],
       [ 1.30405048e+01, -3.73374567e+02,  1.28789222e+03],
       [ 1.62541969e+01, -3.73170600e+02,  1.27841274e+03],
       [ 1.91711839e+01, -3.71593110e+02,  1.27278034e+03],
       [ 2.48115675e+01, -3.72884868e+02,  1.26744028e+03],
       [ 2.91649699e+01, -3.75339047e+02,  1.26430181e+03],
       [ 3.21995808e+01, -3.77881924e+02,  1.26170208e+03],
       [ 3.61144829e+01, -3.83485715e+02,  1.25280810e+03],
       [ 1.28710048e+01, -3.63324767e+02,  1.28531271e+03],
       [ 1.54300969e+01, -3.88200939e+02,  1.28281026e+03],
       [ 3.32615705e+01, -3.56006194e+02,  1.24168650e+03],
       [ 3.05573053e+01, -3.69500607e+02,  1.25749102e+03],
       [ 1.61453481e+01, -3.84490365e+02,  1.30569149e+03],
       [ 3.42504022e+01, -3.80515830e+02,  1.25948018e+03],
       [ 2.84055166e+01, -3.59898081e+02,  1.25738793e+03],
       [ 1.97177878e+01, -3.85230347e+02,  1.27828006e+03],
       [ 2.85544788e+01, -3.64070276e+02,  1.25119021e+03],
       [ 1.89298199e+01, -3.51451538e+02,  1.30176039e+03],
       [ 3.39450222e+01, -3.86403236e+02,  1.26442313e+03],
       [ 3.01635568e+01, -3.66635387e+02,  1.24749125e+03],
       [ 2.06117376e+01, -3.26931216e+02,  1.27667511e+03],
       [ 2.34126161e+01, -3.21838542e+02,  1.28100248e+03],
       [ 1.37320645e+01, -3.62746366e+02,  1.29555192e+03],
       [ 1.84085358e+01, -3.33459892e+02,  1.28401219e+03],
       [ 1.37114074e+01, -3.91859032e+02,  1.29457234e+03],
       [ 2.95590822e+01, -3.11862123e+02,  1.25710132e+03],
       [ 3.47893733e+01, -3.55392875e+02,  1.24333865e+03],
       [ 2.82801418e+01, -3.65882773e+02,  1.25998434e+03],
       [ 1.40126399e+01, -3.82159641e+02,  1.28934751e+03],
       [ 2.40777241e+01, -3.83666246e+02,  1.27162062e+03],
       [ 2.67645630e+01, -3.83657484e+02,  1.26940637e+03],
       [ 2.87257151e+01, -3.34679752e+02,  1.25717042e+03],
       [ 1.38228397e+01, -3.53853321e+02,  1.28452502e+03],
       [ 3.57057927e+01, -3.05583967e+02,  1.25262039e+03],
       [ 2.83831946e+01, -3.11251958e+02,  1.26536600e+03],
       [ 2.58954623e+01, -3.15494388e+02,  1.27223303e+03],
       [ 4.03817157e+01, -4.13952594e+02,  1.25616536e+03],
       [ 4.27095067e+01, -3.05568811e+02,  1.24741692e+03],
       [ 2.94113193e+01, -3.84306106e+02,  1.26768155e+03],
       [ 3.18094369e+01, -3.85393352e+02,  1.26614694e+03],
       [ 3.32603995e+01, -3.85998824e+02,  1.26506543e+03],
       [ 1.41399693e+01, -3.89408810e+02,  1.28714127e+03],
       [ 3.14413638e+01, -3.88196431e+02,  1.26655646e+03],
       [ 2.88379318e+01, -3.88453358e+02,  1.26861954e+03],
       [ 2.61914530e+01, -3.88146899e+02,  1.27038369e+03],
       [ 2.36456076e+01, -3.87312195e+02,  1.27246636e+03],
       [ 2.21018553e+01, -3.86387426e+02,  1.27411344e+03],
       [ 1.44572676e+01, -3.95214990e+02,  1.30276489e+03],
       [ 2.24959058e+01, -3.84081230e+02,  1.27352027e+03],
       [ 3.73615525e+01, -3.50783960e+02,  1.24406381e+03],
       [ 2.79847705e+01, -3.47698515e+02,  1.25391574e+03],
       [ 2.90727504e+01, -3.57617127e+02,  1.25034619e+03],
       [ 3.29252452e+01, -3.49752493e+02,  1.24735887e+03],
       [ 4.00562725e+01, -3.90202817e+02,  1.25270461e+03],
       [ 2.34655963e+01, -3.20833330e+02,  1.26992989e+03],
       [ 2.64488383e+01, -3.16214051e+02,  1.26374753e+03],
       [ 3.41503775e+01, -3.09174961e+02,  1.25048204e+03],
       [ 2.20655330e+01, -3.29187490e+02,  1.28942266e+03],
       [ 3.31092864e+01, -3.87225220e+02,  1.26500243e+03],
       [ 3.32358869e+01, -3.75777306e+02,  1.25229621e+03],
       [ 4.10391793e+01, -3.09177744e+02,  1.24520613e+03],
       [ 3.13115118e+01, -3.07747381e+02,  1.25854462e+03],
       [ 1.49154026e+01, -3.52207746e+02,  1.29382199e+03],
       [ 3.40990349e+01, -3.36651922e+02,  1.25172614e+03],
       [ 3.33740237e+01, -3.35415774e+02,  1.25155721e+03],
       [ 3.26560744e+01, -3.33509266e+02,  1.25140292e+03],
       [ 3.22079696e+01, -3.31050656e+02,  1.25144559e+03],
       [ 3.22602112e+01, -3.27000102e+02,  1.25326297e+03],
       [ 2.98514552e+01, -3.37206822e+02,  1.25558823e+03],
       [ 2.86122147e+01, -3.37277372e+02,  1.25586945e+03],
       [ 2.75846511e+01, -3.37776800e+02,  1.25654228e+03],
       [ 2.46083329e+01, -3.40488342e+02,  1.25935983e+03],
       [ 1.59236070e+01, -3.51418040e+02,  1.27628434e+03],
       [ 3.47087451e+01, -3.80739717e+02,  1.25517414e+03],
       [ 3.53934749e+01, -3.89382173e+02,  1.26084752e+03],
       [ 3.40481926e+01, -3.88797024e+02,  1.26333285e+03],
       [ 3.08920451e+01, -3.38038930e+02,  1.25577739e+03],
       [ 1.72928527e+01, -3.40107371e+02,  1.27860890e+03],
       [ 3.66572377e+01, -3.89247441e+02,  1.25652902e+03],
       [ 3.11703741e+01, -3.22283855e+02,  1.25482210e+03],
       [ 3.62933935e+01, -3.74577687e+02,  1.24490298e+03],
       [ 3.47919890e+01, -3.78276046e+02,  1.24978018e+03],
       [ 3.75806963e+01, -3.79624673e+02,  1.24758179e+03],
       [ 3.07074895e+01, -3.68331830e+02,  1.25291808e+03],
       [ 4.03011281e+01, -3.14377596e+02,  1.24466627e+03],
       [ 4.04048142e+01, -3.20470532e+02,  1.24570440e+03],
       [ 3.54324789e+01, -3.20251589e+02,  1.24973916e+03],
       [ 2.45294341e+01, -3.29908348e+02,  1.26276095e+03],
       [ 2.63030250e+01, -3.55807047e+02,  1.25939458e+03],
       [ 2.76458934e+01, -3.25446427e+02,  1.25915222e+03],
       [ 2.02590782e+01, -3.55770580e+02,  1.26625293e+03],
       [ 2.37230223e+01, -3.50618733e+02,  1.26118808e+03],
       [ 1.86660403e+01, -3.47948665e+02,  1.26942945e+03],
       [ 3.41931176e+01, -3.14298388e+02,  1.24962348e+03],
       [ 2.96746659e+01, -3.65803343e+02,  1.25575756e+03],
       [ 2.29596617e+01, -3.26177709e+02,  1.26666526e+03],
       [ 2.64787673e+01, -3.21295359e+02,  1.26144472e+03],
       [ 2.19645225e+01, -3.35386478e+02,  1.26526696e+03],
       [ 1.52397638e+01, -3.45821490e+02,  1.28396715e+03],
       [ 1.96259951e+01, -3.34737329e+02,  1.27149420e+03],
       [ 1.63969100e+01, -3.42434534e+02,  1.29067386e+03],
       [ 2.20287518e+01, -3.43998530e+02,  1.26340382e+03],
       [ 3.19974895e+01, -3.72747762e+02,  1.25494960e+03],
       [ 2.85787083e+01, -3.58877337e+02,  1.24774496e+03],
       [ 2.77797055e+01, -3.57836665e+02,  1.25147640e+03],
       [ 2.90117234e+01, -3.61795299e+02,  1.24535505e+03],
       [ 3.26133590e+01, -3.92225361e+02,  1.26204639e+03],
       [ 2.72849186e+01, -3.93480686e+02,  1.26539433e+03],
       [ 2.29037785e+01, -3.93282522e+02,  1.26885236e+03],
       [ 1.96428538e+01, -3.92307827e+02,  1.27260577e+03],
       [ 1.78969528e+01, -3.90519573e+02,  1.27633832e+03],
       [ 1.79146023e+01, -3.83994360e+02,  1.28103396e+03],
       [ 1.32189449e+01, -3.72971767e+02,  1.29693730e+03],
       [ 1.93330022e+01, -3.77941384e+02,  1.27655857e+03],
       [ 2.18017854e+01, -3.76876635e+02,  1.27255063e+03],
       [ 2.57958220e+01, -3.77309127e+02,  1.26884726e+03],
       [ 2.97489238e+01, -3.78892793e+02,  1.26592046e+03],
       [ 3.26340872e+01, -3.80794606e+02,  1.26360619e+03],
       [ 3.44719338e+01, -3.82514808e+02,  1.26176631e+03],
       [ 1.76144701e+01, -3.74009431e+02,  1.30579644e+03],
       [ 2.85560197e+01, -3.56800510e+02,  1.25238144e+03],
       [ 3.19449887e+01, -3.71331530e+02,  1.24974261e+03],
       [ 2.97129765e+01, -3.58568196e+02,  1.24404429e+03],
       [ 3.23333323e+01, -3.56699700e+02,  1.24396913e+03],
       [ 3.04435150e+01, -3.57983884e+02,  1.24521081e+03],
       [ 2.99213923e+01, -3.55603329e+02,  1.25229989e+03],
       [ 3.25179167e+01, -3.56248519e+02,  1.24283937e+03],
       [ 3.38651676e+01, -3.55582730e+02,  1.24431783e+03],
       [ 3.47490320e+01, -3.86255789e+02,  1.26285295e+03],
       [ 3.58714213e+01, -3.85133997e+02,  1.26036494e+03],
       [ 3.58343670e+01, -3.84160673e+02,  1.25798639e+03],
       [ 2.12554179e+01, -3.85763694e+02,  1.27535513e+03],
       [ 1.92729296e+01, -3.87456714e+02,  1.27712060e+03],
       [ 3.94887272e+01, -3.74326418e+02,  1.24372126e+03],
       [ 6.99538443e+01, -3.91256744e+02,  1.24750571e+03],
       [ 3.98346013e+01, -3.57101273e+02,  1.24153285e+03],
       [ 9.32383307e+01, -4.14723464e+02,  1.25558499e+03],
       [ 5.86055203e+01, -3.85707734e+02,  1.25049066e+03],
       [ 6.22751360e+01, -3.85848782e+02,  1.24892647e+03],
       [ 6.61163837e+01, -3.86607115e+02,  1.24771418e+03],
       [ 7.22097537e+01, -3.90067705e+02,  1.24773196e+03],
       [ 5.55803491e+01, -3.86471039e+02,  1.25175546e+03],
       [ 6.24430886e+01, -3.96729564e+02,  1.24769872e+03],
       [ 5.86107857e+01, -3.96038656e+02,  1.24941397e+03],
       [ 6.65099483e+01, -3.96808736e+02,  1.24663705e+03],
       [ 6.96700584e+01, -3.96034157e+02,  1.24650374e+03],
       [ 7.59402609e+01, -3.87735574e+02,  1.24689352e+03],
       [ 5.54745841e+01, -3.20422781e+02,  1.24140455e+03],
       [ 7.17243866e+01, -3.92517386e+02,  1.24771341e+03],
       [ 9.44297865e+01, -3.94042558e+02,  1.25260085e+03],
       [ 8.18361010e+01, -3.91879984e+02,  1.24772086e+03],
       [ 5.88588552e+01, -3.66135566e+02,  1.24264126e+03],
       [ 4.15155441e+01, -3.44451683e+02,  1.24076975e+03],
       [ 4.14805262e+01, -3.39793649e+02,  1.24171062e+03],
       [ 4.71733701e+01, -3.43585566e+02,  1.23991470e+03],
       [ 5.11035379e+01, -3.42024984e+02,  1.24008553e+03],
       [ 4.56306936e+01, -3.39980173e+02,  1.24137832e+03],
       [ 4.90666534e+01, -3.39790678e+02,  1.24146604e+03],
       [ 5.80886049e+01, -3.35841640e+02,  1.24145534e+03],
       [ 3.70307369e+01, -3.58801842e+02,  1.23809077e+03],
       [ 3.73583655e+01, -3.63312822e+02,  1.23817776e+03],
       [ 7.63036233e+01, -4.01206497e+02,  1.24522381e+03],
       [ 5.20360900e+01, -3.76953322e+02,  1.24790207e+03],
       [ 4.93473626e+01, -3.62111160e+02,  1.24001650e+03],
       [ 5.02122906e+01, -3.64789914e+02,  1.24127189e+03],
       [ 7.19193785e+01, -3.68706546e+02,  1.24111149e+03],
       [ 3.83009012e+01, -3.69202089e+02,  1.24076278e+03],
       [ 6.39480363e+01, -4.03009163e+02,  1.24483388e+03],
       [ 7.06564640e+01, -4.02906625e+02,  1.24437328e+03],
       [ 8.60016826e+01, -4.21443822e+02,  1.25346167e+03],
       [ 4.68922810e+01, -3.96531530e+02,  1.24961176e+03],
       [ 5.55626000e+01, -3.94531888e+02,  1.25121677e+03],
       [ 6.07880966e+01, -3.40419794e+02,  1.24047558e+03],
       [ 9.45888075e+01, -3.48755296e+02,  1.25451911e+03],
       [ 4.67910542e+01, -3.59169471e+02,  1.24123702e+03],
       [ 4.36291861e+01, -3.57192233e+02,  1.24237920e+03],
       [ 5.62684740e+01, -3.39386076e+02,  1.24176445e+03],
       [ 5.47247829e+01, -3.39584906e+02,  1.24286828e+03],
       [ 7.36541250e+01, -4.06689186e+02,  1.24500387e+03],
       [ 5.03665427e+01, -3.60311812e+02,  1.24109531e+03],
       [ 5.59582784e+01, -4.01136470e+02,  1.24644685e+03],
       [ 5.66012027e+01, -4.05195948e+02,  1.24634699e+03],
       [ 6.46729116e+01, -4.27975344e+02,  1.25281397e+03],
       [ 7.94331812e+01, -4.14259499e+02,  1.24904001e+03],
       [ 5.99913176e+01, -4.17051745e+02,  1.24943262e+03],
       [ 8.00592661e+01, -4.04198705e+02,  1.24642400e+03],
       [ 8.64191809e+01, -4.09213743e+02,  1.25070018e+03],
       [ 4.14055382e+01, -3.41669563e+02,  1.24091017e+03],
       [ 4.60945761e+01, -3.41310728e+02,  1.24035851e+03],
       [ 4.98869810e+01, -3.40760420e+02,  1.24051388e+03],
       [ 4.61160921e+01, -3.58232949e+02,  1.24194950e+03],
       [ 5.53769550e+01, -3.39377363e+02,  1.24219104e+03],
       [ 5.36229455e+01, -3.38439166e+02,  1.24256648e+03],
       [ 5.45726576e+01, -3.39919697e+02,  1.24347921e+03],
       [ 4.31362186e+01, -3.59984932e+02,  1.23965894e+03],
       [ 4.89072685e+01, -3.40152895e+02,  1.24270069e+03],
       [ 4.54930422e+01, -3.39872041e+02,  1.24260642e+03],
       [ 4.17633730e+01, -3.39329466e+02,  1.24296983e+03],
       [ 4.54294012e+01, -3.26521139e+02,  1.24469646e+03],
       [ 4.39534745e+01, -3.30907711e+02,  1.24362938e+03],
       [ 4.34600264e+01, -3.33505634e+02,  1.24374439e+03],
       [ 4.32667544e+01, -3.35805791e+02,  1.24435048e+03],
       [ 4.32719702e+01, -3.37361390e+02,  1.24513901e+03],
       [ 5.01278472e+01, -3.38725082e+02,  1.24400654e+03],
       [ 5.05053544e+01, -3.38227391e+02,  1.24341076e+03],
       [ 5.12326296e+01, -3.37145956e+02,  1.24269510e+03],
       [ 5.20801842e+01, -3.35740740e+02,  1.24220224e+03],
       [ 5.48879798e+01, -3.48039888e+02,  1.24003131e+03],
       [ 1.00298127e+02, -3.74025464e+02,  1.25804499e+03],
       [ 5.23060380e+01, -3.39140702e+02,  1.24395020e+03],
       [ 5.27954090e+01, -3.38924634e+02,  1.24316843e+03],
       [ 4.23086786e+01, -3.54918182e+02,  1.24255145e+03],
       [ 4.96438085e+01, -3.57380810e+02,  1.24225851e+03],
       [ 4.29431498e+01, -3.55990980e+02,  1.24243686e+03],
       [ 5.61811677e+01, -3.74882549e+02,  1.24652856e+03],
       [ 6.21180795e+01, -3.72599708e+02,  1.24376565e+03],
       [ 5.15100011e+01, -3.62993495e+02,  1.24188236e+03],
       [ 7.66695412e+01, -4.26049445e+02,  1.25239099e+03],
       [ 7.08957792e+01, -4.17102404e+02,  1.24862590e+03],
       [ 6.56670400e+01, -4.07285593e+02,  1.24514045e+03],
       [ 5.46720897e+01, -3.32580840e+02,  1.24208750e+03],
       [ 4.76650663e+01, -4.02674963e+02,  1.24901008e+03],
       [ 5.03431490e+01, -4.15828214e+02,  1.25199070e+03],
       [ 5.34881481e+01, -4.27931193e+02,  1.25522961e+03],
       [ 6.98656253e+01, -3.88058581e+02,  1.24743995e+03],
       [ 8.08190838e+01, -3.85333766e+02,  1.24594699e+03],
       [ 5.36141428e+01, -3.87412330e+02,  1.25245567e+03],
       [ 7.54747469e+01, -3.95873101e+02,  1.24678150e+03],
       [ 4.89777158e+01, -3.79461379e+02,  1.24863453e+03],
       [ 4.56576720e+01, -3.63120001e+02,  1.23912702e+03],
       [ 8.67424034e+01, -3.83205224e+02,  1.24631244e+03],
       [ 7.65542047e+01, -3.81164197e+02,  1.24426926e+03],
       [ 7.01157411e+01, -3.78301211e+02,  1.24388816e+03],
       [ 6.23224613e+01, -3.77798232e+02,  1.24603373e+03],
       [ 5.71063438e+01, -3.79023259e+02,  1.24831586e+03],
       [ 5.30734722e+01, -3.80621444e+02,  1.24981529e+03],
       [ 4.26858091e+01, -3.84374459e+02,  1.24912310e+03],
       [ 8.52909194e+01, -3.72762186e+02,  1.24391032e+03],
       [ 7.96246449e+01, -3.97230598e+02,  1.24684373e+03],
       [ 3.67291722e+01, -3.56478666e+02,  1.23981000e+03],
       [ 5.08794163e+01, -3.72110428e+02,  1.24586788e+03],
       [ 1.00567086e+02, -3.96027730e+02,  1.25932182e+03],
       [ 4.98493208e+01, -3.82585794e+02,  1.25063470e+03],
       [ 5.27517170e+01, -3.62953072e+02,  1.24333000e+03],
       [ 7.36598429e+01, -3.92796545e+02,  1.24776450e+03],
       [ 4.66781805e+01, -3.66375879e+02,  1.24080367e+03],
       [ 9.86370240e+01, -3.61903840e+02,  1.25642969e+03],
       [ 5.40394285e+01, -3.89171124e+02,  1.25308020e+03],
       [ 4.23262982e+01, -3.68242557e+02,  1.24058968e+03],
       [ 7.76218753e+01, -3.34271120e+02,  1.24400786e+03],
       [ 8.08216639e+01, -3.29258705e+02,  1.24814225e+03],
       [ 9.43469401e+01, -3.73366865e+02,  1.24978546e+03],
       [ 8.44331287e+01, -3.41902378e+02,  1.24585923e+03],
       [ 9.09189263e+01, -4.02621771e+02,  1.25220769e+03],
       [ 5.73879336e+01, -3.15532497e+02,  1.24157346e+03],
       [ 3.75962266e+01, -3.55778234e+02,  1.24184133e+03],
       [ 5.45821690e+01, -3.69263852e+02,  1.24491591e+03],
       [ 8.67802007e+01, -3.92105764e+02,  1.24864555e+03],
       [ 6.54992133e+01, -3.89248755e+02,  1.24785186e+03],
       [ 6.21201608e+01, -3.88406195e+02,  1.24901280e+03],
       [ 5.46929512e+01, -3.37722025e+02,  1.24213575e+03],
       [ 8.49371125e+01, -3.62990971e+02,  1.24349910e+03],
       [ 5.09678087e+01, -3.07621916e+02,  1.24424698e+03],
       [ 6.55859605e+01, -3.16161372e+02,  1.24451858e+03],
       [ 7.25366331e+01, -3.21619585e+02,  1.24586735e+03],
       [ 5.92048246e+01, -3.88311270e+02,  1.25049751e+03],
       [ 5.65968826e+01, -3.88726352e+02,  1.25192311e+03],
       [ 5.49276608e+01, -3.88938584e+02,  1.25271175e+03],
       [ 8.41122230e+01, -3.99261219e+02,  1.24821690e+03],
       [ 5.68583656e+01, -3.91735041e+02,  1.25202403e+03],
       [ 5.98378812e+01, -3.92802880e+02,  1.25078312e+03],
       [ 6.27854731e+01, -3.93344307e+02,  1.24938189e+03],
       [ 6.60904917e+01, -3.93338903e+02,  1.24819231e+03],
       [ 6.85235576e+01, -3.92955768e+02,  1.24768149e+03],
       [ 9.78376014e+01, -4.06823149e+02,  1.25761622e+03],
       [ 6.79935963e+01, -3.90263903e+02,  1.24748448e+03],
       [ 5.11475674e+01, -3.50543069e+02,  1.24063714e+03],
       [ 4.63435656e+01, -3.59775040e+02,  1.24047772e+03],
       [ 4.26160758e+01, -3.50965103e+02,  1.24189604e+03],
       [ 7.09698898e+01, -3.27018078e+02,  1.24302985e+03],
       [ 6.44425865e+01, -3.21191575e+02,  1.24229660e+03],
       [ 4.93785679e+01, -3.11170069e+02,  1.24210658e+03],
       [ 8.81998826e+01, -3.37703806e+02,  1.25145258e+03],
       [ 5.48359965e+01, -3.90218547e+02,  1.25269331e+03],
       [ 4.43455905e+01, -3.77251915e+02,  1.24604850e+03],
       [ 5.83602962e+01, -3.11347675e+02,  1.24357077e+03],
       [ 9.31701483e+01, -3.62388196e+02,  1.24903840e+03],
       [ 4.68719262e+01, -3.38135751e+02,  1.24429994e+03],
       [ 4.72314341e+01, -3.37052883e+02,  1.24361165e+03],
       [ 4.77071568e+01, -3.35342191e+02,  1.24296198e+03],
       [ 4.83267743e+01, -3.33049440e+02,  1.24253224e+03],
       [ 5.05332545e+01, -3.29294798e+02,  1.24304866e+03],
       [ 5.23587251e+01, -3.39673416e+02,  1.24205244e+03],
       [ 5.32601109e+01, -3.40011873e+02,  1.24118103e+03],
       [ 5.43681324e+01, -3.40803913e+02,  1.24075635e+03],
       [ 5.82760802e+01, -3.44518542e+02,  1.23980095e+03],
       [ 7.65706937e+01, -3.59091942e+02,  1.24093871e+03],
       [ 4.57496044e+01, -3.82218730e+02,  1.24896998e+03],
       [ 4.97061407e+01, -3.91334545e+02,  1.25270081e+03],
       [ 5.27014365e+01, -3.91371291e+02,  1.25274722e+03],
       [ 5.19324706e+01, -3.40311948e+02,  1.24311769e+03],
       [ 7.92484454e+01, -3.47925482e+02,  1.24257533e+03],
       [ 4.51967346e+01, -3.90410452e+02,  1.25166065e+03],
       [ 5.31474618e+01, -3.25066854e+02,  1.24235658e+03],
       [ 4.11003251e+01, -3.79136081e+02,  1.24629252e+03],
       [ 4.67718737e+01, -3.70397124e+02,  1.24372703e+03],
       [ 4.66110602e+01, -3.21672202e+02,  1.24343170e+03],
       [ 6.28036174e+01, -3.34707085e+02,  1.24098589e+03],
       [ 5.60372953e+01, -3.59566843e+02,  1.24226654e+03],
       [ 5.85379248e+01, -3.29349331e+02,  1.24168735e+03],
       [ 6.50147581e+01, -3.61430013e+02,  1.24027778e+03],
       [ 5.93755321e+01, -3.55070435e+02,  1.24059254e+03],
       [ 6.93893015e+01, -3.54304882e+02,  1.23978139e+03],
       [ 4.79261348e+01, -3.16079658e+02,  1.24194067e+03],
       [ 5.00506703e+01, -3.68395232e+02,  1.24401902e+03],
       [ 6.76219993e+01, -3.31911400e+02,  1.24134279e+03],
       [ 6.17159029e+01, -3.25835067e+02,  1.24150271e+03],
       [ 6.56303167e+01, -3.40807634e+02,  1.24015021e+03],
       [ 8.44955549e+01, -3.54647047e+02,  1.24383712e+03],
       [ 7.24430242e+01, -3.41420582e+02,  1.24103533e+03],
       [ 9.04961959e+01, -3.52005531e+02,  1.24806130e+03],
       [ 6.28501739e+01, -3.49012041e+02,  1.23967679e+03],
       [ 4.75951261e+01, -3.74774017e+02,  1.24609574e+03],
       [ 4.41680198e+01, -3.60871267e+02,  1.23898867e+03],
       [ 4.79691059e+01, -3.60347967e+02,  1.23994011e+03],
       [ 4.14932884e+01, -3.63427506e+02,  1.23837100e+03],
       [ 5.18269935e+01, -3.94901137e+02,  1.25096842e+03],
       [ 5.73443670e+01, -3.97803146e+02,  1.24817354e+03],
       [ 6.26920148e+01, -3.99025843e+02,  1.24620453e+03],
       [ 6.78965917e+01, -3.99242803e+02,  1.24527232e+03],
       [ 7.23423569e+01, -3.98329117e+02,  1.24557663e+03],
       [ 7.71913925e+01, -3.92237537e+02,  1.24767695e+03],
       [ 9.49408888e+01, -3.83915072e+02,  1.25103546e+03],
       [ 7.29539440e+01, -3.85176391e+02,  1.24621680e+03],
       [ 6.81275823e+01, -3.83042519e+02,  1.24628490e+03],
       [ 6.26771240e+01, -3.82214953e+02,  1.24775983e+03],
       [ 5.79520530e+01, -3.82643138e+02,  1.24974796e+03],
       [ 5.43075155e+01, -3.83678755e+02,  1.25120106e+03],
       [ 5.16445689e+01, -3.84811034e+02,  1.25197855e+03],
       [ 1.00813158e+02, -3.85157928e+02,  1.25938870e+03],
       [ 4.85446308e+01, -3.59301659e+02,  1.24092795e+03],
       [ 4.30466843e+01, -3.72801837e+02,  1.24347045e+03],
       [ 4.03118350e+01, -3.59977417e+02,  1.23817776e+03],
       [ 3.92194279e+01, -3.57636283e+02,  1.24026188e+03],
       [ 4.10791098e+01, -3.59394352e+02,  1.23932612e+03],
       [ 4.79395444e+01, -3.57834325e+02,  1.24190809e+03],
       [ 3.81354348e+01, -3.57004087e+02,  1.23980357e+03],
       [ 3.89153363e+01, -3.56266880e+02,  1.24160265e+03],
       [ 5.22179283e+01, -3.88643998e+02,  1.25297228e+03],
       [ 4.94746498e+01, -3.86967540e+02,  1.25266112e+03],
       [ 4.74186344e+01, -3.85705828e+02,  1.25145339e+03],
       [ 7.01690576e+01, -3.92663998e+02,  1.24753959e+03],
       [ 7.26233125e+01, -3.95010310e+02,  1.24695442e+03]])
#/lol

#3D array holding [[[x, y, z], [x, y, z]], [[x, y, z], [x, y, z]]] 
arr = np.load(input_npy)

# Saved clean frame where all points are visible and not NANs 
markers_list = np.load(build_data)

#a list containing empty objects
order_of_markers = []

#frame rate 
bpy.context.scene.render.fps = 30

#dictionary corresponding to marker numbers and body parts
body_dict = {
    0:"head1", 
    11:"shoulder_L", 
    12:"shoulder_R", 
    13:"elbow_L", 
    14:"elbow_R", 
    23:"hip_L",
    24:"hip_R", 
    25:"knee_L", 
    26:"knee_R",
    27:"ankle_L",
    28:"ankle_R",
    29:"heel_L", 
    30:"heel_R",
    31:"toe_L",
    32:"toe_R" }

#-----------------------------------------------------------------------------------   

# set project unit 
bpy.context.scene.unit_settings.length_unit = 'METERS'
#iterate through arr and create an empty object at that location for each element
for index, col in enumerate(markers_list):
    # parse string float value into floats, create Vector, set position to Vector

    if math.isnan(col[0]):
        col[0] = 0.0
    if math.isnan(col[1]):
        col[1] = 0.0
    if math.isnan(col[2]):
        col[2] = 0.0
    coord = Vector(((float(col[0])*0.001), (float(col[2])*0.001), (float(col[1]))* -0.001))
        
    #empties
    bpy.ops.object.add(type='EMPTY', location=coord)  
    mt = bpy.context.active_object  
    mt.name = "mt_" + str(index)
    if index in body_dict.keys():
        mt.name += "_" + str(body_dict[index])
    order_of_markers.append(mt)
    #link empty to scene
    bpy.context.scene.collection.objects.link( mt )
    #set location 
    mt.location = coord
    #set the display size of the empty
    mt.empty_display_size = 0.02
    
#--------------------------------------------------------------
#Virtual Markers!

# marker relationships:

# - "weight": the weighted average of multiple markers. the virtual_markers[x] contains the 
#list of markers that affect this virtual one. the weights[x] contains their corresponding weights in order.

bpy.ops.object.mode_set(mode='OBJECT', toggle=False)

#Create virtual marker where parameters are the name of the marker, the markers that affect its position, and each of their weights.
def create_marker_weight(name, markers, weighted):
    center = Vector((0, 0, 0))
    weight_iter = 0
    for x in markers:
        center += x.location*weighted[weight_iter]
        weight_iter += 1
    coord = Vector((float(center[0]), float(center[1]), float(center[2])))
    bpy.ops.object.add(type='EMPTY', location=coord)
    mt = bpy.context.active_object  
    mt.name = name
    bpy.context.scene.collection.objects.link( mt )
    mt.location = coord
    mt.empty_display_size = 0.02
    virtual_markers.append(mt)

#Keeping track of virtual marker info using arrays, where each marker is an index in each array
v_relationship = []
virtual_markers = []
surrounding_markers = []
weights = []

#updates data and creates virtual marker
def update_virtual_data(relationship, surrounding, vweights, vname):
    v_relationship.append(relationship)
    surrounding_markers.append(surrounding)
    weights.append(vweights)
    create_marker_weight(vname, surrounding, vweights)
         
#-----------------------------------------------------------------
#Define relationships and create virtual markers

#Neck Base: Halfway between order_of_markers[12] shoulder_L and order_of_markers[12] shoulder_R
l0 = [order_of_markers[12], order_of_markers[11]]
w0 = [0.5, 0.5]
update_virtual_data("weight", l0, w0, "m_neck")

#Waist Base: Halfway between order_of_markers[24] and order_of_markers[23] 
l0 = [order_of_markers[24], order_of_markers[23]]
w0 = [0.5, 0.5]
update_virtual_data("weight", l0, w0, "m_neck")

#Update the location of virtual markers on each frame
def update_virtual_marker(index):
    if(v_relationship[index] is "weight"):
        center = Vector((0, 0, 0))
        weight_iter = 0
        for x in surrounding_markers[index]:
            center += x.location*weights[index][weight_iter]
            weight_iter += 1
        coord = Vector((float(center[0]), float(center[1]), float(center[2])))
    virtual_markers[index].location = coord
    
#-----------------------------------------------------------------------------------
# Bones! 
    
#adds child bone given corresponding parent and empty
#bone tail will appear at the location of empty
def add_child_bone(bone_name, empty1, empty2):
    #Set armature selected
    armature_data.select_set(state=True)
    #Set edit mode
    bpy.ops.object.mode_set(mode='EDIT', toggle=False)
    #Create a new bone
    new_bone = armature_data.data.edit_bones.new(bone_name)
    #Set bone's size
    new_bone.head = (0,0,0)
    new_bone.tail = (0,0.1,0)
    #Set bone's location to wheel
    new_bone.matrix = empty2.matrix_world
    #set location of bone head
    new_bone.head =  empty1.location
    #set location of bone tail
    new_bone.tail = empty2.location
    return new_bone

#Create armature object
armature = bpy.data.armatures.new('Armature')
armature_object = bpy.data.objects.new('Armature', armature)
#Link armature object to our scene
bpy.context.collection.objects.link(armature_object)
#Make armature variable
armature_data = bpy.data.objects[armature_object.name]
#Set armature active
bpy.context.view_layer.objects.active = armature_data
#Set armature selected
armature_data.select_set(state=True)
#Set edit mode
bpy.ops.object.mode_set(mode='EDIT', toggle=False)
#Set bones in front and show axis
armature_data.show_in_front = True
#True to show axis orientation of bones and false to hide it
armature_data.data.show_axes = False

#get armature object
def get_armature():
    for ob in bpy.data.objects:
        if ob.type == 'ARMATURE':
            armature = ob
            break
    return armature

armature = get_armature()

#a list of tuples where each element represents the info for one bone, and 
#the tuple contains the bone name, the marker of the head, and the marker of the tail
list_of_bones_order = [('upper_arm_L', order_of_markers[11], order_of_markers[13]),
        ('upper_arm_R', order_of_markers[12], order_of_markers[14]),
        ('lower_arm_L', order_of_markers[13], order_of_markers[15]),
        ('lower_arm_R', order_of_markers[14], order_of_markers[16]),
        ('upper_leg_L', order_of_markers[23], order_of_markers[25]),
        ('upper_leg_R', order_of_markers[24], order_of_markers[26]),
        ('lower_leg_L', order_of_markers[25], order_of_markers[27]),
        ('lower_leg_R', order_of_markers[26], order_of_markers[28]),
        ('heel_L', order_of_markers[27], order_of_markers[29]),
        ('heel_R', order_of_markers[28], order_of_markers[30]),
        ('foot_L', order_of_markers[29], order_of_markers[31]),
        ('foot_R', order_of_markers[30], order_of_markers[32]),
        ('neck', order_of_markers[0], virtual_markers[0]),
        ('eye_L', order_of_markers[0], order_of_markers[2]),
        ('ear_L', order_of_markers[2], order_of_markers[7]),
        ('eye_R', order_of_markers[0], order_of_markers[5]),
        ('ear_R', order_of_markers[5], order_of_markers[8]),
        ('shoulder_L', virtual_markers[0], order_of_markers[11]),
        ('shoulder_R', virtual_markers[0], order_of_markers[12]),
        ('torso', virtual_markers[1], virtual_markers[0]),
        ('hip_L', virtual_markers[1], order_of_markers[23]),
        ('hip_R', virtual_markers[1], order_of_markers[24]),
        ]
        
#based on marker # from order_of_markers array add bones for hands:
left_hand_offset = 54
left_hand = [('handL0', order_of_markers[0+left_hand_offset], order_of_markers[1+left_hand_offset]),
    ('handL1', order_of_markers[1+left_hand_offset], order_of_markers[2+left_hand_offset]),
    ('handL2', order_of_markers[2+left_hand_offset], order_of_markers[3+left_hand_offset]),
    ('handL3', order_of_markers[3+left_hand_offset], order_of_markers[4+left_hand_offset]),
    ('handL5', order_of_markers[1+left_hand_offset], order_of_markers[5+left_hand_offset]),
    ('handL6', order_of_markers[5+left_hand_offset], order_of_markers[6+left_hand_offset]),
    ('handL7', order_of_markers[6+left_hand_offset], order_of_markers[7+left_hand_offset]),
    ('handL8', order_of_markers[7+left_hand_offset], order_of_markers[8+left_hand_offset]),
    ('handL9', order_of_markers[5+left_hand_offset], order_of_markers[9+left_hand_offset]),
    ('handL10', order_of_markers[9+left_hand_offset], order_of_markers[10+left_hand_offset]),
    ('handL11', order_of_markers[10+left_hand_offset], order_of_markers[11+left_hand_offset]),
    ('handL12', order_of_markers[11+left_hand_offset], order_of_markers[12+left_hand_offset]),
    ('handL13', order_of_markers[9+left_hand_offset], order_of_markers[13+left_hand_offset]),
    ('handL14', order_of_markers[13+left_hand_offset], order_of_markers[14+left_hand_offset]),
    ('handL15', order_of_markers[14+left_hand_offset], order_of_markers[15+left_hand_offset]),
    ('handL16', order_of_markers[15+left_hand_offset], order_of_markers[16+left_hand_offset]),
    ('handL17', order_of_markers[13+left_hand_offset], order_of_markers[0+left_hand_offset]),
    ('handL18', order_of_markers[0+left_hand_offset], order_of_markers[17+left_hand_offset]),
    ('handL19', order_of_markers[17+left_hand_offset], order_of_markers[18+left_hand_offset]),
    ('handL20', order_of_markers[18+left_hand_offset], order_of_markers[19+left_hand_offset]),
    ('wristL', order_of_markers[15], order_of_markers[0+left_hand_offset]),
    ('handL21', order_of_markers[19+left_hand_offset], order_of_markers[20+left_hand_offset]),]
    
right_hand_offset = 33

right_hand = [('handR0', order_of_markers[18], order_of_markers[1+right_hand_offset]),
    ('handR1', order_of_markers[1+right_hand_offset], order_of_markers[2+right_hand_offset]),
    ('handR2', order_of_markers[2+right_hand_offset], order_of_markers[3+right_hand_offset]),
    ('handR3', order_of_markers[3+right_hand_offset], order_of_markers[4+right_hand_offset]),
    ('handR5', order_of_markers[1+right_hand_offset], order_of_markers[5+right_hand_offset]),
    ('handR6', order_of_markers[5+right_hand_offset], order_of_markers[6+right_hand_offset]),
    ('handR7', order_of_markers[6+right_hand_offset], order_of_markers[7+right_hand_offset]),
    ('handR8', order_of_markers[7+right_hand_offset], order_of_markers[8+right_hand_offset]),
    ('handR9', order_of_markers[5+right_hand_offset], order_of_markers[9+right_hand_offset]),
    ('handR10', order_of_markers[9+right_hand_offset], order_of_markers[10+right_hand_offset]),
    ('handR11', order_of_markers[10+right_hand_offset], order_of_markers[11+right_hand_offset]),
    ('handR12', order_of_markers[11+right_hand_offset], order_of_markers[12+right_hand_offset]),
    ('handR13', order_of_markers[9+right_hand_offset], order_of_markers[13+right_hand_offset]),
    ('handR14', order_of_markers[13+right_hand_offset], order_of_markers[14+right_hand_offset]),
    ('handR15', order_of_markers[14+right_hand_offset], order_of_markers[15+right_hand_offset]),
    ('handR16', order_of_markers[15+right_hand_offset], order_of_markers[16+right_hand_offset]),
    ('handR17', order_of_markers[18], order_of_markers[13+right_hand_offset]),
    ('handR18', order_of_markers[18], order_of_markers[17+right_hand_offset]),
    ('handR19', order_of_markers[17+right_hand_offset], order_of_markers[18+right_hand_offset]),
    ('handR20', order_of_markers[18+right_hand_offset], order_of_markers[19+right_hand_offset]),
    ('wristR', order_of_markers[16], order_of_markers[18]),
    ('handR21', order_of_markers[19+right_hand_offset], order_of_markers[20+right_hand_offset]),]

#helper to create armature from list of tuples
def tuple_to_armature(bones):
    for bone_name, bone_head, bone_tail in bones:
        add_child_bone(bone_name, bone_head, bone_tail)
        
#Set armature selected
armature_data.select_set(state=True)
#Set edit mode
bpy.ops.object.mode_set(mode='EDIT', toggle=False)
        
#create all bones for skeleton body and hands
tuple_to_armature(list_of_bones_order)
tuple_to_armature(right_hand)
tuple_to_armature(left_hand)

#parent heads and tails to empties
#use bone constraints 
def parent_to_empties(bone_name, head, tail):
    #enter pose mode
    bpy.ops.object.posemode_toggle()
    marker = armature.data.bones[bone_name]
    #Set marker selected
    marker.select = True
    #Set marker active
    bpy.context.object.data.bones.active = marker
    bone = bpy.context.object.pose.bones[bone_name]
    #Copy Location Pose constraint: makes the bone's head follow the given empty
    bpy.ops.pose.constraint_add(type='COPY_LOCATION')
    bone.constraints["Copy Location"].target = head
    #Stretch To Pose constraint: makes the bone's tail follow the given empty
    #stretches the bones to reach the tail to that empty so head location is not affected
    bpy.ops.pose.constraint_add(type='STRETCH_TO')
    bone.constraints["Stretch To"].target = tail
    #exit pose mode
    bpy.ops.object.posemode_toggle()
    
#set parents of heads and tails for each bone 
def tuple_to_parented(bones):
    for bone_name, bone_head, bone_tail in bones:
        parent_to_empties(bone_name, bone_head, bone_tail)

tuple_to_parented(list_of_bones_order)
tuple_to_parented(right_hand)
tuple_to_parented(left_hand)

#-----------------------------------------------------------------------------------
# Animate! 
#find number of frames in animation
num_frames = len(arr)

#change start frame of animation
bpy.context.scene.frame_start = 1
#change end frame of animation
bpy.context.scene.frame_end = num_frames - 1

#create a new handler to change empty positions every frame
def my_handler(scene): 
    bpy.ops.object.mode_set(mode='OBJECT')
    #keep track of current_marker
    current_marker = 0
    #find the current frame number
    frame = scene.frame_current
    #get the list of marker points from the current frame
    markers_list = arr[frame]
    #iterate through list of markers in this frame
    for col in markers_list:
        frame = scene.frame_current
        if math.isnan(col[0]):
            col[0] = 0.0
        if math.isnan(col[1]):
            col[1] = 0.0
        if math.isnan(col[2]):
            col[2] = 0.0
        coord = Vector(((float(col[0])*0.001), (float(col[2])*0.001), (float(col[1]))* -0.001))
        if len(order_of_markers) > 0:
            empty = order_of_markers[current_marker]
            empty.location = coord
            current_marker += 1 
            for index in range(len(virtual_markers)):
                update_virtual_marker(index)
    
    
    #keyframe bones
    #Goes through each bone
    for editBone in get_armature().data.edit_bones:
        boneName = editBone.name
        poseBone = arm.pose.bones[boneName]
        poseBone.keyframe_insert('rotation_euler', frame=scene.frame_current)
        poseBone.keyframe_insert('location', frame=scene.frame_current)
        poseBone.keyframe_insert('scale', frame=scene.frame_current)

#-----------------------------------------------------------------------------------
#script to create a mesh of the armature 
def CreateMesh():
    obj = get_armature()

    if obj == None:
        print( "No selection" )
    elif obj.type != 'ARMATURE':
        print( "Armature expected" )
    else:
        return processArmature( bpy.context, obj )

#Use armature to create base object
def armToMesh( arm ):
    name = arm.name + "_mesh"
    dataMesh = bpy.data.meshes.new( name + "Data" )
    mesh = bpy.data.objects.new( name, dataMesh )
    mesh.matrix_world = arm.matrix_world.copy()
    return mesh

#Make vertices and faces 
def boneGeometry( l1, l2, x, z, baseSize, l1Size, l2Size, base ):
    x1 = x  * baseSize * l1Size * 0.8
    z1 = z  * baseSize * l2Size * 0.8
    
    x2 = Vector( (0, 0, 0) )
    z2 = Vector( (0, 0, 0) )

    verts = [
        l1 - x1 + z1,
        l1 + x1 + z1,
        l1 - x1 - z1,
        l1 + x1 - z1,
        l2 - x2 + z2,
        l2 + x2 + z2,
        l2 - x2 - z2,
        l2 + x2 - z2
        ] 

    faces = [
        (base+3, base+1, base+0, base+2),
        (base+6, base+4, base+5, base+7),
        (base+4, base+0, base+1, base+5),
        (base+7, base+3, base+2, base+6),
        (base+5, base+1, base+3, base+7),
        (base+6, base+2, base+0, base+4)
        ]

    return verts, faces

#Process the armature, goes through its bones and creates the mesh
def processArmature(context, arm, genVertexGroups = True):
    print("processing armature {0}".format(arm.name))

    #Creates the mesh object
    meshObj = armToMesh( arm )
    context.collection.objects.link( meshObj )

    verts = []
    edges = []
    faces = []
    vertexGroups = {}

    bpy.ops.object.mode_set(mode='EDIT')

    try:
        #Goes through each bone
        for editBone in get_armature().data.edit_bones:
            boneName = editBone.name
            if boneName == "":
                editBone.name = "bone"
                boneName = "bone"
            poseBone = arm.pose.bones[boneName]

            #Gets edit bone informations
            editBoneHead = editBone.head
            editBoneTail = editBone.tail
            editBoneVector = editBoneTail - editBoneHead
            editBoneSize = editBoneVector.dot( editBoneVector )
            editBoneRoll = editBone.roll
            editBoneX = editBone.x_axis
            editBoneZ = editBone.z_axis
            editBoneHeadRadius = editBone.head_radius
            editBoneTailRadius = editBone.tail_radius

            #Creates the mesh data for the bone
            baseIndex = len(verts)
            baseSize = math.sqrt( editBoneSize )
            newVerts, newFaces = boneGeometry( editBoneHead, editBoneTail, editBoneX, editBoneZ, baseSize, editBoneHeadRadius, editBoneTailRadius, baseIndex )
            verts.extend( newVerts )
            faces.extend( newFaces )

            #Creates the weights for the vertex groups
            vertexGroups[boneName] = [(x, 1.0) for x in range(baseIndex, len(verts))]
        #Assigns the geometry to the mesh
        meshObj.data.from_pydata(verts, edges, faces)

    except:
        bpy.ops.object.mode_set(mode='OBJECT')
    else:
        bpy.ops.object.mode_set(mode='OBJECT')
    #Assigns the vertex groups
    if genVertexGroups:
        for name1, vertexGroup in vertexGroups.items():
            groupObject = meshObj.vertex_groups.new(name = name1)
            for (index, weight) in vertexGroup:
                groupObject.add([index], weight, 'REPLACE')

    #Creates the armature modifier
    modifier = meshObj.modifiers.new('ArmatureMod', 'ARMATURE')
    modifier.object = arm
    modifier.use_bone_envelopes = False
    modifier.use_vertex_groups = True

    meshObj.data.update()

    return meshObj

mesh_obob = CreateMesh()

#-----------------------------------------------------------------------------------
# Clean up the mesh by removing duplicate vertices, make sure all faces are quads, etc

checked = set()
for selected_object in bpy.data.objects:
    if selected_object.type != 'MESH':
        continue
    meshdata = selected_object.data
    if meshdata in checked:
        continue
    else:
        checked.add(meshdata)
    bpy.context.view_layer.objects.active = selected_object
    bpy.ops.object.editmode_toggle()
    bpy.ops.mesh.select_all(action='SELECT')
    bpy.ops.mesh.remove_doubles()
    bpy.ops.mesh.tris_convert_to_quads()
    bpy.ops.mesh.normals_make_consistent()
    bpy.ops.object.editmode_toggle()
#Set armature active
bpy.context.view_layer.objects.active = armature_data
#Set armature selected
armature_data.select_set(state=True)
#-----------------------------------------------------------------------------------
#function to register custom handler
bpy.app.handlers.frame_change_post.clear()
def register():
    bpy.app.handlers.frame_change_post.append(my_handler)
   
def unregister():
    bpy.app.handlers.frame_change_post.remove(my_handler)
    
register()

scene = bpy.context.scene

bpy.ops.object.mode_set(mode='OBJECT')

#set keyframes for whole animation
for frame in range(scene.frame_start, scene.frame_end):
   scene.frame_set(frame)
   
#Select objects to export
col = bpy.data.collections.get("Collection")
if col:
   for obj in col.objects:
       if "Armature" == obj.name:
            obj.select_set(True)


#Bake the skeletal animation
# ensure that only the armature is selected in Object mode
bpy.ops.object.mode_set(mode='OBJECT')
bpy.ops.object.select_all(action='DESELECT')
#Set armature active
bpy.context.view_layer.objects.active = bpy.data.objects[get_armature().name]
#Set armature selected
bpy.data.objects[get_armature().name].select_set(state=True)

#Change to pose mode
bpy.ops.object.mode_set(mode='POSE')

#Bake the animation
bpy.ops.nla.bake(frame_start=scene.frame_start, frame_end=scene.frame_end, only_selected=False, visual_keying=True, clear_constraints=True, use_current_action=False, bake_types={'POSE'})
    
bpy.ops.object.mode_set(mode='OBJECT')

#delete empties
empties = [e for e in bpy.data.objects
        if e.type.startswith('EMPTY')]
        
while empties:
    bpy.data.objects.remove(empties.pop())

order_of_markers = []


#Select objects to export
col = bpy.data.collections.get("Collection")
if col:
   for obj in col.objects:
       if "Armature" in obj.name:
            obj.select_set(True)
       if obj.name == "Cube":
            bpy.data.objects.remove(obj)
            
#save blender file
blend_file_save_path = sesh_path + "skeletal_animation_session.blend"
print('saving .blend file to - ' +  blend_file_save_path)

bpy.ops.wm.save_as_mainfile(filepath= sesh_path + "skeletal_animation_session.blend")

#export FBX
bpy.ops.export_scene.fbx(filepath=sesh_path + "skeletal_animation_session.fbx", path_mode='RELATIVE', bake_anim=True, use_selection=True, object_types={'MESH', 'ARMATURE'}, use_mesh_modifiers = False, add_leaf_bones = False, axis_forward = '-X', axis_up = 'Z', bake_anim_use_all_bones = False, bake_anim_use_nla_strips = False, bake_anim_use_all_actions = False, bake_anim_force_startend_keying = False) 

#export GLTF
bpy.ops.export_scene.gltf(filepath=sesh_path + "skeletal_animation_session.gltf", export_format='GLTF_EMBEDDED', export_selected=True, ui_tab='ANIMATION')

#export USD
bpy.ops.wm.usd_export(filepath=sesh_path + 'skeletal_animation_session.usdc', selected_objects_only=True, export_animation=True)

